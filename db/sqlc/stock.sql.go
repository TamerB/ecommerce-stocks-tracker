// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: stock.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const consumeStock = `-- name: ConsumeStock :exec
UPDATE stocks
SET quantity = quantity - $1
WHERE id = $2
`

type ConsumeStockParams struct {
	Quantity int64 `json:"quantity"`
	ID       int64 `json:"id"`
}

func (q *Queries) ConsumeStock(ctx context.Context, arg ConsumeStockParams) error {
	_, err := q.exec(ctx, q.consumeStockStmt, consumeStock, arg.Quantity, arg.ID)
	return err
}

const getProductStockCountBySKU = `-- name: GetProductStockCountBySKU :one
SELECT SUM(stocks.quantity) AS total 
FROM stocks
INNER JOIN products
ON stocks.product_id = products.id
AND products.sku = $1 LIMIT 1
`

func (q *Queries) GetProductStockCountBySKU(ctx context.Context, sku string) (int64, error) {
	row := q.queryRow(ctx, q.getProductStockCountBySKUStmt, getProductStockCountBySKU, sku)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getStockByProductSKUAndCountryCodeForUpdate = `-- name: GetStockByProductSKUAndCountryCodeForUpdate :one
SELECT stocks.id, stocks.quantity 
FROM stocks
INNER JOIN products
ON stocks.product_id = products.id
AND products.sku = $1
INNER JOIN countries
ON stocks.country_id = countries.id
AND countries.country_code = $2
LIMIT 1
FOR NO KEY UPDATE
`

type GetStockByProductSKUAndCountryCodeForUpdateParams struct {
	Sku     string `json:"sku"`
	Country string `json:"country"`
}

type GetStockByProductSKUAndCountryCodeForUpdateRow struct {
	ID       int64 `json:"id"`
	Quantity int64 `json:"quantity"`
}

func (q *Queries) GetStockByProductSKUAndCountryCodeForUpdate(ctx context.Context, arg GetStockByProductSKUAndCountryCodeForUpdateParams) (GetStockByProductSKUAndCountryCodeForUpdateRow, error) {
	row := q.queryRow(ctx, q.getStockByProductSKUAndCountryCodeForUpdateStmt, getStockByProductSKUAndCountryCodeForUpdate, arg.Sku, arg.Country)
	var i GetStockByProductSKUAndCountryCodeForUpdateRow
	err := row.Scan(&i.ID, &i.Quantity)
	return i, err
}

const listProductStocksBySKU = `-- name: ListProductStocksBySKU :many
SELECT 
    products.id AS id, 
    products.sku AS sku, 
    products.name AS name, 
    products.created_at AS created_at, 
    products.updated_at AS updated_at,
    countries.country_code AS country,
    stocks.quantity AS quantity
FROM products
LEFT JOIN stocks
ON products.id = stocks.product_id
LEFT JOIN countries
ON countries.id = stocks.country_id
WHERE products.sku = $1
`

type ListProductStocksBySKURow struct {
	ID        int64          `json:"id"`
	Sku       string         `json:"sku"`
	Name      string         `json:"name"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Country   sql.NullString `json:"country"`
	Quantity  sql.NullInt64  `json:"quantity"`
}

func (q *Queries) ListProductStocksBySKU(ctx context.Context, sku string) ([]ListProductStocksBySKURow, error) {
	rows, err := q.query(ctx, q.listProductStocksBySKUStmt, listProductStocksBySKU, sku)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductStocksBySKURow{}
	for rows.Next() {
		var i ListProductStocksBySKURow
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Country,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
