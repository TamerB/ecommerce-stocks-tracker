// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TamerB/ecommerce-stocks-tracker/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/TamerB/ecommerce-stocks-tracker/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ConsumeStock mocks base method.
func (m *MockStore) ConsumeStock(arg0 context.Context, arg1 db.ConsumeStockParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeStock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeStock indicates an expected call of ConsumeStock.
func (mr *MockStoreMockRecorder) ConsumeStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeStock", reflect.TypeOf((*MockStore)(nil).ConsumeStock), arg0, arg1)
}

// ConsumeStockTx mocks base method.
func (m *MockStore) ConsumeStockTx(arg0 context.Context, arg1 db.UpdateStockTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeStockTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeStockTx indicates an expected call of ConsumeStockTx.
func (mr *MockStoreMockRecorder) ConsumeStockTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeStockTx", reflect.TypeOf((*MockStore)(nil).ConsumeStockTx), arg0, arg1)
}

// GetProductBySKU mocks base method.
func (m *MockStore) GetProductBySKU(arg0 context.Context, arg1 string) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySKU", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySKU indicates an expected call of GetProductBySKU.
func (mr *MockStoreMockRecorder) GetProductBySKU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySKU", reflect.TypeOf((*MockStore)(nil).GetProductBySKU), arg0, arg1)
}

// GetProductStockCountBySKU mocks base method.
func (m *MockStore) GetProductStockCountBySKU(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStockCountBySKU", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductStockCountBySKU indicates an expected call of GetProductStockCountBySKU.
func (mr *MockStoreMockRecorder) GetProductStockCountBySKU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStockCountBySKU", reflect.TypeOf((*MockStore)(nil).GetProductStockCountBySKU), arg0, arg1)
}

// GetStockByProductSKUAndCountryCodeForUpdate mocks base method.
func (m *MockStore) GetStockByProductSKUAndCountryCodeForUpdate(arg0 context.Context, arg1 db.GetStockByProductSKUAndCountryCodeForUpdateParams) (db.GetStockByProductSKUAndCountryCodeForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockByProductSKUAndCountryCodeForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.GetStockByProductSKUAndCountryCodeForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockByProductSKUAndCountryCodeForUpdate indicates an expected call of GetStockByProductSKUAndCountryCodeForUpdate.
func (mr *MockStoreMockRecorder) GetStockByProductSKUAndCountryCodeForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockByProductSKUAndCountryCodeForUpdate", reflect.TypeOf((*MockStore)(nil).GetStockByProductSKUAndCountryCodeForUpdate), arg0, arg1)
}

// ListProductStocksBySKU mocks base method.
func (m *MockStore) ListProductStocksBySKU(arg0 context.Context, arg1 string) ([]db.ListProductStocksBySKURow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductStocksBySKU", arg0, arg1)
	ret0, _ := ret[0].([]db.ListProductStocksBySKURow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductStocksBySKU indicates an expected call of ListProductStocksBySKU.
func (mr *MockStoreMockRecorder) ListProductStocksBySKU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductStocksBySKU", reflect.TypeOf((*MockStore)(nil).ListProductStocksBySKU), arg0, arg1)
}
