// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A service for keeping an accurate list of products and their stocks up to date",
    "title": "E-Commerce Stocks Tracker",
    "version": "0.1.0"
  },
  "basePath": "/",
  "paths": {
    "/healthz": {
      "get": {
        "security": [],
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "Health"
        ],
        "operationId": "getHealthz",
        "responses": {
          "200": {
            "$ref": "#/responses/stringOkResponse"
          }
        }
      }
    },
    "/products/{sku}": {
      "get": {
        "description": "Get product entry by SKU",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Product"
        ],
        "summary": "Get a product by SKU",
        "operationId": "GetProductBySku",
        "parameters": [
          {
            "$ref": "#/parameters/sku"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/successfulOperationResponse"
          },
          "400": {
            "$ref": "#/responses/invalidError"
          },
          "404": {
            "$ref": "#/responses/productNotFoundError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/products/{sku}/stocks": {
      "get": {
        "description": "Get product's stocks entries by SKU",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Product"
        ],
        "summary": "Get a product's stocks by SKU",
        "operationId": "GetProductStocksBySku",
        "parameters": [
          {
            "$ref": "#/parameters/sku"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/successfulOperationResponse"
          },
          "400": {
            "$ref": "#/responses/invalidError"
          },
          "404": {
            "$ref": "#/responses/productNotFoundError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/products/{sku}/stocks/{country}": {
      "put": {
        "description": "Consumes a product's stock by SKU and country",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Stock"
        ],
        "summary": "Consumes a product's stock",
        "operationId": "ConsumeProductStock",
        "parameters": [
          {
            "$ref": "#/parameters/sku"
          },
          {
            "$ref": "#/parameters/country"
          },
          {
            "description": "Consume Product's stock in given country",
            "name": "ConsumeProductStockParams",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConsumeProductStockRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/successfulOperationResponse"
          },
          "400": {
            "$ref": "#/responses/invalidError"
          },
          "404": {
            "$ref": "#/responses/productNotFoundError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/readyz": {
      "get": {
        "security": [],
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "Health"
        ],
        "operationId": "getReadyz",
        "responses": {
          "200": {
            "$ref": "#/responses/stringOkResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "BaseResponse": {
      "description": "Base response type",
      "type": "object",
      "properties": {
        "Data": {
          "description": "Response Data",
          "type": "object",
          "enum": [
            "Product",
            "ProductStocks"
          ]
        },
        "Errors": {
          "description": "Errors encountered. Present only when ` + "`" + `Success` + "`" + ` is false.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "Messages": {
          "description": "Messages to notify caller while hitting various limits",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "Success": {
          "description": "Overall Success of the operation",
          "type": "boolean",
          "example": false
        }
      }
    },
    "ConsumeProductStockRequestBody": {
      "type": "object",
      "required": [
        "quantity"
      ],
      "properties": {
        "quantity": {
          "description": "Quantity consumed",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CountryStock": {
      "type": "object",
      "required": [
        "country",
        "quantity"
      ],
      "properties": {
        "country": {
          "description": "Country Code",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity in stock",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Error": {
      "description": "Error information",
      "type": "object",
      "properties": {
        "Number": {
          "description": "The error code to use when communicating about this problem",
          "type": "integer",
          "example": 8001
        },
        "Text": {
          "description": "A description of this error, which may include formatting specific to this context",
          "type": "string",
          "example": "Some Failure"
        }
      }
    },
    "Message": {
      "description": "Informational message",
      "type": "object",
      "properties": {
        "Number": {
          "description": "The message code to use when communicating about this problem",
          "type": "integer",
          "example": 8001
        },
        "Text": {
          "description": "A description of this message, which may include formatting specific to this context",
          "type": "string",
          "example": "Location closed"
        },
        "Type": {
          "description": "Type of message, e.g. warning/info",
          "type": "string",
          "example": "Info"
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "id",
        "sku",
        "name",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "created_at": {
          "description": "Product Creation Timestamp",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Product ID",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Product Name",
          "type": "string"
        },
        "sku": {
          "description": "Product SKU",
          "type": "string"
        },
        "updated_at": {
          "description": "Product Update Timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProductStocks": {
      "type": "object",
      "required": [
        "id",
        "sku",
        "name",
        "created_at",
        "updated_at",
        "stocks"
      ],
      "properties": {
        "created_at": {
          "description": "Product Creation Timestamp",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Product ID",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Product Name",
          "type": "string"
        },
        "sku": {
          "description": "Product SKU",
          "type": "string"
        },
        "stocks": {
          "description": "Stocks per countries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryStock"
          }
        },
        "updated_at": {
          "description": "Product Update Timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "parameters": {
    "country": {
      "maxLength": 2,
      "pattern": "^[a-z]+$",
      "type": "string",
      "description": "Country Code",
      "name": "country",
      "in": "path",
      "required": true
    },
    "sku": {
      "maxLength": 12,
      "pattern": "^[a-z0-9]+$",
      "type": "string",
      "description": "Product SKU",
      "name": "sku",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "genericError": {
      "description": "Return response with error other than the defined ones",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    },
    "invalidError": {
      "description": "Invalid SKU",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    },
    "productNotFoundError": {
      "description": "Product not found",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    },
    "stringOkResponse": {
      "description": "OK",
      "schema": {
        "type": "string",
        "enum": [
          "OK"
        ]
      }
    },
    "successfulOperationResponse": {
      "description": "successful operation",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A service for keeping an accurate list of products and their stocks up to date",
    "title": "E-Commerce Stocks Tracker",
    "version": "0.1.0"
  },
  "basePath": "/",
  "paths": {
    "/healthz": {
      "get": {
        "security": [],
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "Health"
        ],
        "operationId": "getHealthz",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    },
    "/products/{sku}": {
      "get": {
        "description": "Get product entry by SKU",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Product"
        ],
        "summary": "Get a product by SKU",
        "operationId": "GetProductBySku",
        "parameters": [
          {
            "maxLength": 12,
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "description": "Product SKU",
            "name": "sku",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "400": {
            "description": "Invalid SKU",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "default": {
            "description": "Return response with error other than the defined ones",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        }
      }
    },
    "/products/{sku}/stocks": {
      "get": {
        "description": "Get product's stocks entries by SKU",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Product"
        ],
        "summary": "Get a product's stocks by SKU",
        "operationId": "GetProductStocksBySku",
        "parameters": [
          {
            "maxLength": 12,
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "description": "Product SKU",
            "name": "sku",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "400": {
            "description": "Invalid SKU",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "default": {
            "description": "Return response with error other than the defined ones",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        }
      }
    },
    "/products/{sku}/stocks/{country}": {
      "put": {
        "description": "Consumes a product's stock by SKU and country",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Stock"
        ],
        "summary": "Consumes a product's stock",
        "operationId": "ConsumeProductStock",
        "parameters": [
          {
            "maxLength": 12,
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "description": "Product SKU",
            "name": "sku",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 2,
            "pattern": "^[a-z]+$",
            "type": "string",
            "description": "Country Code",
            "name": "country",
            "in": "path",
            "required": true
          },
          {
            "description": "Consume Product's stock in given country",
            "name": "ConsumeProductStockParams",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConsumeProductStockRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "400": {
            "description": "Invalid SKU",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          },
          "default": {
            "description": "Return response with error other than the defined ones",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        }
      }
    },
    "/readyz": {
      "get": {
        "security": [],
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "Health"
        ],
        "operationId": "getReadyz",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BaseResponse": {
      "description": "Base response type",
      "type": "object",
      "properties": {
        "Data": {
          "description": "Response Data",
          "type": "object",
          "enum": [
            "Product",
            "ProductStocks"
          ]
        },
        "Errors": {
          "description": "Errors encountered. Present only when ` + "`" + `Success` + "`" + ` is false.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "Messages": {
          "description": "Messages to notify caller while hitting various limits",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "Success": {
          "description": "Overall Success of the operation",
          "type": "boolean",
          "example": false
        }
      }
    },
    "ConsumeProductStockRequestBody": {
      "type": "object",
      "required": [
        "quantity"
      ],
      "properties": {
        "quantity": {
          "description": "Quantity consumed",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CountryStock": {
      "type": "object",
      "required": [
        "country",
        "quantity"
      ],
      "properties": {
        "country": {
          "description": "Country Code",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity in stock",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Error": {
      "description": "Error information",
      "type": "object",
      "properties": {
        "Number": {
          "description": "The error code to use when communicating about this problem",
          "type": "integer",
          "example": 8001
        },
        "Text": {
          "description": "A description of this error, which may include formatting specific to this context",
          "type": "string",
          "example": "Some Failure"
        }
      }
    },
    "Message": {
      "description": "Informational message",
      "type": "object",
      "properties": {
        "Number": {
          "description": "The message code to use when communicating about this problem",
          "type": "integer",
          "example": 8001
        },
        "Text": {
          "description": "A description of this message, which may include formatting specific to this context",
          "type": "string",
          "example": "Location closed"
        },
        "Type": {
          "description": "Type of message, e.g. warning/info",
          "type": "string",
          "example": "Info"
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "id",
        "sku",
        "name",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "created_at": {
          "description": "Product Creation Timestamp",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Product ID",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Product Name",
          "type": "string"
        },
        "sku": {
          "description": "Product SKU",
          "type": "string"
        },
        "updated_at": {
          "description": "Product Update Timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProductStocks": {
      "type": "object",
      "required": [
        "id",
        "sku",
        "name",
        "created_at",
        "updated_at",
        "stocks"
      ],
      "properties": {
        "created_at": {
          "description": "Product Creation Timestamp",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Product ID",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Product Name",
          "type": "string"
        },
        "sku": {
          "description": "Product SKU",
          "type": "string"
        },
        "stocks": {
          "description": "Stocks per countries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryStock"
          }
        },
        "updated_at": {
          "description": "Product Update Timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "parameters": {
    "country": {
      "maxLength": 2,
      "pattern": "^[a-z]+$",
      "type": "string",
      "description": "Country Code",
      "name": "country",
      "in": "path",
      "required": true
    },
    "sku": {
      "maxLength": 12,
      "pattern": "^[a-z0-9]+$",
      "type": "string",
      "description": "Product SKU",
      "name": "sku",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "genericError": {
      "description": "Return response with error other than the defined ones",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    },
    "invalidError": {
      "description": "Invalid SKU",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    },
    "productNotFoundError": {
      "description": "Product not found",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    },
    "stringOkResponse": {
      "description": "OK",
      "schema": {
        "type": "string",
        "enum": [
          "OK"
        ]
      }
    },
    "successfulOperationResponse": {
      "description": "successful operation",
      "schema": {
        "$ref": "#/definitions/BaseResponse"
      }
    }
  }
}`))
}
