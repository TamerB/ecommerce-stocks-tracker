// Code generated by go-swagger; DO NOT EDIT.

package stock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/TamerB/ecommerce-stocks-tracker/api/models"
)

// NewConsumeProductStockParams creates a new ConsumeProductStockParams object
//
// There are no default values defined in the spec.
func NewConsumeProductStockParams() ConsumeProductStockParams {

	return ConsumeProductStockParams{}
}

// ConsumeProductStockParams contains all the bound params for the consume product stock operation
// typically these are obtained from a http.Request
//
// swagger:parameters ConsumeProductStock
type ConsumeProductStockParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Consume Product's stock in given country
	  In: body
	*/
	ConsumeProductStockParams *models.ConsumeProductStockRequestBody
	/*Country Code
	  Required: true
	  Max Length: 2
	  Pattern: ^[a-z]+$
	  In: path
	*/
	Country string
	/*Product SKU
	  Required: true
	  Max Length: 12
	  Pattern: ^[a-z0-9]+$
	  In: path
	*/
	Sku string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewConsumeProductStockParams() beforehand.
func (o *ConsumeProductStockParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ConsumeProductStockRequestBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("consumeProductStockParams", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.ConsumeProductStockParams = &body
			}
		}
	}

	rCountry, rhkCountry, _ := route.Params.GetOK("country")
	if err := o.bindCountry(rCountry, rhkCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	rSku, rhkSku, _ := route.Params.GetOK("sku")
	if err := o.bindSku(rSku, rhkSku, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCountry binds and validates parameter Country from path.
func (o *ConsumeProductStockParams) bindCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Country = raw

	if err := o.validateCountry(formats); err != nil {
		return err
	}

	return nil
}

// validateCountry carries on validations for parameter Country
func (o *ConsumeProductStockParams) validateCountry(formats strfmt.Registry) error {

	if err := validate.MaxLength("country", "path", o.Country, 2); err != nil {
		return err
	}

	if err := validate.Pattern("country", "path", o.Country, `^[a-z]+$`); err != nil {
		return err
	}

	return nil
}

// bindSku binds and validates parameter Sku from path.
func (o *ConsumeProductStockParams) bindSku(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Sku = raw

	if err := o.validateSku(formats); err != nil {
		return err
	}

	return nil
}

// validateSku carries on validations for parameter Sku
func (o *ConsumeProductStockParams) validateSku(formats strfmt.Registry) error {

	if err := validate.MaxLength("sku", "path", o.Sku, 12); err != nil {
		return err
	}

	if err := validate.Pattern("sku", "path", o.Sku, `^[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}
